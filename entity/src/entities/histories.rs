//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, DeriveEntityModel)]
#[sea_orm(table_name = "histories")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub date: Date,
    #[sea_orm(primary_key, auto_increment = false)]
    pub session: String,
    pub history: String,
    pub uploaded_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::puzzles::Entity",
        from = "Column::Date",
        to = "super::puzzles::Column::Date",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Puzzles,
    #[sea_orm(
        belongs_to = "super::sessions::Entity",
        from = "Column::Session",
        to = "super::sessions::Column::Session",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Sessions,
}

impl Related<super::puzzles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Puzzles.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
