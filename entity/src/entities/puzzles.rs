//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use std::fmt::Display;

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{PuzzleDate, PuzzleSolution};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, DeriveEntityModel)]
#[sea_orm(table_name = "puzzles")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub date: PuzzleDate,
    pub solution: PuzzleSolution,
    pub is_deleted: bool,
}

impl Display for Model {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{} [{} {}]",
            self.solution,
            self.date,
            if self.is_deleted { '-' } else { '+' }
        )
    }
}

impl Model {
    pub fn to_result_puzzle(self) -> ResultPuzzle {
        self.into()
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct ResultPuzzle {
    pub date: PuzzleDate,
    pub solution: PuzzleSolution,
}

impl Display for ResultPuzzle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{} [{}]", self.solution, self.date)
    }
}

impl From<Model> for ResultPuzzle {
    fn from(Model { date, solution, .. }: Model) -> Self {
        Self { date, solution }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::histories::Entity")]
    Histories,
}

impl Related<super::histories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Histories.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        super::histories::Relation::Sessions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::histories::Relation::Puzzles.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
